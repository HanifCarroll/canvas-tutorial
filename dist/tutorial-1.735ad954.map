{"version":3,"sources":["helpers.js","Circle.js","index.js"],"names":["getRandomColor","letters","split","color","i","Math","round","random","canvas","document","querySelector","c","getContext","xOffset","window","innerWidth","width","mouse","x","y","onMouseMove","event","addEventListener","Circle","radius","minRadius","xPositive","yPositive","beginPath","arc","PI","fillStyle","fill","checkBoundaries","growCircles","draw","xSpeedSlider","ySpeedSlider","xSpeed","parseInt","value","ySpeed","height","abs","resizeWindow","innerHeight","makeCircles","circles","amount","push","animate","requestAnimationFrame","clearRect","forEach","circle","update"],"mappings":"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","file":"tutorial-1.735ad954.map","sourceRoot":"..","sourcesContent":["export function getRandomColor() {\n  const letters = \"0123456789ABCDEF\".split(\"\");\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.round(Math.random() * 15)];\n  }\n  return color;\n}\n","import { getRandomColor } from \"./helpers\";\n\nconst canvas = document.querySelector(\"canvas\");\nconst c = canvas.getContext(\"2d\");\n\nconst xOffset = window.innerWidth - canvas.width;\n\nconst mouse = {\n  x: null,\n  y: null,\n};\n\nwindow.addEventListener(\"mousemove\", event => onMouseMove(event));\n\nfunction onMouseMove(event) {\n  mouse.x = event.x;\n  mouse.y = event.y;\n}\n\nexport default class Circle {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.color = getRandomColor();\n    this.minRadius = radius;\n    this.xPositive = true;\n    this.yPositive = true;\n  }\n\n  draw() {\n    const { x, y, radius, color } = this;\n\n    c.beginPath();\n    c.arc(x, y, radius, 0, Math.PI * 2, false);\n    c.fillStyle = color;\n    c.fill();\n  }\n\n  update() {\n    this.checkBoundaries();\n    this.growCircles();\n    this.draw();\n  }\n\n  checkBoundaries() {\n    const xSpeedSlider = document.querySelector(\"#x-speed\");\n    const ySpeedSlider = document.querySelector(\"#y-speed\");\n    let xSpeed = parseInt(xSpeedSlider.value);\n    let ySpeed = parseInt(ySpeedSlider.value);\n\n    if (this.x + this.radius > canvas.width || this.x - this.radius < 0) {\n      this.xPositive = !this.xPositive;\n    }\n\n    if (this.y + this.radius > canvas.height || this.y - this.radius < 0) {\n      this.yPositive = !this.yPositive;\n    }\n\n    this.xPositive ? (this.x += xSpeed) : (this.x -= xSpeed);\n    this.yPositive ? (this.y += ySpeed) : (this.y -= ySpeed);\n  }\n\n  growCircles() {\n    const maxRadius = 80;\n    const maxDistance = 50;\n\n    if (\n      Math.abs(mouse.x - this.x - xOffset) < maxDistance &&\n      Math.abs(mouse.y - this.y) < maxDistance\n    ) {\n      if (this.radius < maxRadius) {\n        this.radius += 1;\n      }\n    } else if (this.radius > this.minRadius) {\n      this.radius -= 1;\n    }\n  }\n}\n","import Circle from \"./Circle\";\n\n// SETUP\nconst canvas = document.querySelector(\"canvas\");\nconst c = canvas.getContext(\"2d\");\n\ncanvas.width = window.innerWidth * 0.85;\ncanvas.height = window.innerHeight;\n\nwindow.addEventListener(\"resize\", resizeWindow);\n\nfunction resizeWindow() {\n  canvas.width = window.innerWidth * 0.85;\n  canvas.height = window.innerHeight;\n  makeCircles(200, 10);\n}\n// END SETUP\n\n// MAIN\nlet circles = [];\nmakeCircles(200, 10);\nanimate();\n\nfunction makeCircles(amount, radius) {\n  circles = [];\n\n  for (let i = 0; i < amount; i++) {\n    radius = Math.random() * 15 + 5;\n    const x = Math.random() * (canvas.width - radius * 2) + radius;\n    const y = Math.random() * (canvas.height - radius * 2) + radius;\n\n    circles.push(new Circle(x, y, radius));\n  }\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  circles.forEach(circle => circle.update());\n}\n// END MAIN\n"]}